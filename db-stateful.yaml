apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-db
  namespace: stateful
spec:
  serviceName: "postgres-db"
  replicas: 2
  selector:
    matchLabels:
      app: postgres-db
  template:
    metadata:
      labels:
        app: postgres-db
    spec:
      initContainers:
        - name: setup-replica
          image: postgres:16.4
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -e
              if [[ $(hostname) == *-1 ]]; then
                echo "🔁 Initializing replica..."
                export PGPASSWORD=$REPLICATION_PASSWORD
                if [ -z "$(ls -A /var/lib/postgresql/data)" ]; then
                  pg_basebackup -h postgres-db-0.postgres-db.stateful.svc.cluster.local \
                    -U $REPLICATION_USER \
                    -D /var/lib/postgresql/data \
                    -Fp -Xs -R -P
                fi
              else
                echo "🚀 Primary detected, generating init.sql..."
                echo "CREATE USER $REPLICATION_USER REPLICATION LOGIN ENCRYPTED PASSWORD '$REPLICATION_PASSWORD';" > /docker-entrypoint-initdb.d/init.sql
              fi
          env:
            - name: REPLICATION_USER
              valueFrom:
                secretKeyRef:
                  name: replication-secret
                  key: REPLICATION_USER
            - name: REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: replication-secret
                  key: REPLICATION_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d

      containers:
        - name: postgres-db
          image: postgres:16.4
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: db-secret
                  key: POSTGRES_PASSWORD
            - name: POSTGRES_DB
              value: "PSO_BI_Dev4"
            - name: REPLICATION_USER
              valueFrom:
                secretKeyRef:
                  name: replication-secret
                  key: REPLICATION_USER
            - name: REPLICATION_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: replication-secret
                  key: REPLICATION_PASSWORD
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
            - name: config-volume
              mountPath: /etc/postgresql/postgresql.conf
              subPath: postgres.conf
            - name: config-volume
              mountPath: /etc/postgresql/pg_hba.conf
              subPath: pg_hba.conf
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
          args:
            - "-c"
            - "config_file=/etc/postgresql/postgresql.conf"
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: db-pvc
        - name: config-volume
          configMap:
            name: postgres-config
        - name: initdb
          emptyDir: {}


---
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  namespace: stateful
spec:
  selector:
    app: postgres-db
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
      nodePort: 32080   # Exposed Port (Should be within 30000–32767)
  type: NodePort
  externalTrafficPolicy: Local 


---
apiVersion: v1
kind: Service
metadata:
  name: postgres-db
  namespace: stateful
spec:
  clusterIP: None
  selector:
    app: postgres-db
  ports:
    - port: 5432


---
apiVersion: v1
kind: Service
metadata:
  name: postgres-replica-public
  namespace: stateful
spec:
  selector:
    statefulset.kubernetes.io/pod-name: postgres-db-1
  ports:
    - port: 5434
      targetPort: 5432
      nodePort: 32081
  type: NodePort
  externalTrafficPolicy: Local

